# generated by Git for Windows
source ~/.bash_vars.sh
test -f ~/.profile && . ~/.profile
test -f ~/.bashrc && . ~/.bashrc

# function to generate aliases from variables stored in bash_vars.sh
# this function is defined in .bash_vars.sh
source_aliases

# Transcribing App
alias cdproj="cd ~/Documents/TranscribingApp/naked-electron"
alias proj="cd ~/Documents/TranscribingApp/naked-electron && npm start"

# Git
alias winadd="git add . && git reset package.json && git reset package-lock.json"
alias gc="git commit -m"
alias gco="git checkout"
alias gcob="git checkout -b"
alias pull="git pull"
alias pullx="git pull origin master --rebase -Xtheirs"
alias push="git push"
alias pushf="git push --force-with-lease"
alias revise="git commit --amend --no-edit"
alias stat="git status"

# Portal
alias portal="start ~/Documents/tpg-dev-portal/release/build/win-unpacked/ElectronReact.exe"
alias portaldev="cd ~/Documents/dev-portal-v2/electron-frontend/ && npm start"
alias cdportal="cd ~/Documents/dev-portal-v2"
alias codeportal="code ~/Documents/dev-portal-v2/electron-frontend"

# Work
alias awsauth="aws sso login --sso-session Okta && aws --profile tpg-prd codeartifact login --tool npm --repository travelpass-design-system --domain travelpassgroup --domain-owner 361429333791 --region us-west-2"
alias cdtpg="cd ~/Documents/Travelpass/travelpass.com/"
alias codetpg="code ~/Documents/Travelpass/travelpass.com/"
alias rmnpmrc="rm ~/.npmrc"
alias work="code ~/Documents/Travelpass/travelpass.com/ && start ~/Documents/tpg-dev-portal/release/build/win-unpacked/ElectronReact.exe && start C:/Users/Christopher/AppData/Local/slack/slack.exe && start C:/Users/Christopher/AppData/Local/Figma/Figma.exe && start https://linear.app/travelpass/ && start https://github.com/travelpassgroup/travelpass.com"

# shows all files with directory specified by argument 2, which have been modified by author
# specified by argument 1. Argument 2 can be empty to default to "/"
function gitfilter() {
    local dir_name
    if [ -z "$2" ]; then
        dir_name="/"
    else
        dir_name="$2"
    fi
    git log --author="$1" --pretty=format: --name-only | sort -u | grep "$dir_name"
}

function initialcommit() {
    local commit_message=$1
    local commit_description=$2
    git commit -m "$commit_message" -m "" -m "$commit_description"
}

function lint() {
# $# means number of arguments passed in
# $@ means all arguments passed in
# -gt means greater than
  if [ "$#" -gt 0 ]; then
    for file in "$@"; do
      npx eslint "$file" --fix
      git diff "$file"
    done
  else
    local changed_files
    changed_files=$(git diff --name-only)

    if [ -z "$changed_files" ]; then
      echo "No changes detected, running eslint on all files"
      npx eslint "./app/**/*.{ts,tsx,js,jsx}" --fix
    else
      echo "Linting changed files"
      for file in $changed_files; do
        if [[ $file == *".ts" || $file == *".tsx" || $file == *".js" || $file == *".jsx" ]]; then
          npx eslint "$file" --fix
        fi
      done
    fi
  fi
}


function renamelast() {
    local new_name=$1
    git commit --amend -m "$new_name"
}

# TODO: my PAT needs the 'contents' permission so the contents of the PR can be read
# Look into whether it needs more permissions as well
function openpr() {
    local title=$1
    local body=$2
    local head=$(git symbolic-ref --short HEAD)
    local prNumber
    local response=$(curl -s -w "%{http_code}" -o response.json -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $pat" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/${owner}/${repo}/pulls \
        -d '{
            "title": "'"$title"'",
            "body": "'"$body"'",
            "head": "'"$head"'",
            "base": "master"
        }')
    
    # Extract the HTTP status code and response body
    local http_status=${response:(-3)} # Last 3 characters are the HTTP status code
    local body_response=$(cat response.json)

    # Handle the response
    if [[ "$http_status" == "201" ]]; then
        echo "Pull request created successfully!"
        echo "Response: $body_response"
    else
        echo "Failed to create pull request. HTTP Status: $http_status"
        echo "Error Response: $body_response"
    fi

    # Cleanup
    rm -f response.json
}

# Misc
alias cpbash="cp ~/.bash_profile ~/Documents/bash_profile && cd ~/Documents/bash_profile && git add . && git commit && git push"
alias editbash="start ~/.bash_profile"
alias editbashvars="start ~/.bash_vars.sh"
alias hyperprefs="start C:/Users/Christopher/AppData/Roaming/Hyper/.hyper.js"
alias updatebash="source ~/.bash_profile && source ~/.bashrc && source ~/.bash_vars.sh"



